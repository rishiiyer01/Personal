##Aerodynamic Airfoil Analysis Script
#Scipt takes in pressure field + wall shear stress, so this script will work with any fluent software that outputs a file
#here we take in given functions for pressure, wall shear and profile


##instructions for running the script, assuming you have python set up: run the script, the first plot for part a will appear.
#Then, exit out of that plot and the second plot should appear. I have left a print statement for part C commented, feel free to check
#either the entire vector or the dimension of the vector (len). I used a finite difference method to compute the derivatives for part A,
#which I applied as a convolution rather than a matrix multiplication.



import numpy as np
import matplotlib.pyplot as plt
x=np.linspace(0,1.8,181)

a=0.6
b=0.1
def y(x,a,b):
    y1upper=((b**2)-(b**2/a**2)*(x-a)**2)**0.5
    y2upper=x**3*(b/(4*a**3))-x**2*(3*b/(2*a**2))+x*(9*b/(4*a))
    y1lower=-(4*b/(9*a**2))*(3-(4*x/(3*a)))*(x**2)
    y2lower=-b+(4*b/(3*a**2))*((x-(3*a/2))**2)-(16*b/(27*a**3))*((x-(3*a/2))**3)
    yUpper=np.hstack((y1upper[0:60],y2upper[60:181]))
    yLower=np.hstack((y1lower[0:90],y2lower[90:181]))
    ##calculating derivatives using finite difference convolution, O(dx^2), I could have done this analytically but there was no rule
    dx=0.01
    kernel=[0.5/dx,0,-0.5/dx]
    dyUpperdx=np.convolve(yUpper,kernel,mode='same')
    dyLowerdx=np.convolve(yLower,kernel,mode='same')
    dyLowerdx[0]=(yLower[1]-yLower[0])/dx
    dyLowerdx[180]=(yLower[180]-yLower[179])/dx
    dyUpperdx[0]=(yUpper[1]-yUpper[0])/dx
    dyUpperdx[180]=(yUpper[180]-yUpper[179])/dx
    return(yUpper,yLower,dyUpperdx,dyLowerdx)
yUpper,yLower,dyUpperdx,dyLowerdx=y(x,a,b)
plt.plot(x, yUpper, '-',label='yUpper')
plt.plot(x,yLower,'-',label='yLower')
plt.plot(x,dyUpperdx,'-',label='dy/dx Upper')
plt.plot(x,dyLowerdx,'-',label='dy/dx Lower')
print(dyUpperdx.shape,dyLowerdx.shape)

# add labels to the axes
plt.xlabel('X axis')
plt.ylabel('Y axis')
plt.legend()
# show the plot
plt.show()
c=1.8


averagingKernel=[0.5,0.5]
ycenterUpper=np.convolve(yUpper,averagingKernel,mode='valid')
ycenterLower=np.convolve(yLower,averagingKernel,mode='valid')
dyLowerdxCenter=np.convolve(dyLowerdx,averagingKernel,mode='valid')
dyUpperdxCenter=np.convolve(dyUpperdx,averagingKernel,mode='valid')
xcenter=np.convolve(x,averagingKernel,mode='valid')
#print("x_Center:",xcenter,"y_center_upper",ycenterUpper,"y_center_lower",ycenterLower,"y' center upper",dyUpperdxCenter,"y' center lower",dyLowerdxCenter)
#using ds=sqrt(1+(dy/dx^2))dx for part D
dx=0.01
dsUpper=dx*(1+(dyUpperdxCenter)**2)**0.5
dsLower=dx*(1+(dyLowerdxCenter)**2)**0.5
sUpper=np.cumsum(dsUpper)
sLower=np.cumsum(dsLower)
##integration of ds, which is just summation, results in s(x), here we use cumulative summation function to perform the integral for all upper bounds
#theta
thetaUpper=-np.arctan(dyUpperdxCenter)
thetaLower=-np.arctan(dyLowerdxCenter)
#print("dsUpper",dsUpper,"dsLower",dsLower,"Supper",sUpper,"SLower",sLower,"thetaUpper",thetaUpper,"thetaLower",thetaLower)
##since I have the ds computed, and I also can say dscostheta=dx, the equations become relatively simple. First, we hardcode for shear at wall
ShearUpper=5000*np.exp(-sUpper/(10*a))
ShearLower=7000*np.exp(-sLower/(10*a))
Pupper=130000*np.exp(-xcenter/(10*a))
Plower=150000*np.exp(-xcenter/(10*a))
#converting pressure into a function of x by dividing by cosine(theta)
Pupper=Pupper/np.cos(thetaUpper)
Plower=Plower/np.cos(thetaLower)
#technically we dont have to do this, since it will get canceled anyway but might as well to keep the formula consistent, this are the formulas for P and Shear as functions of s

##UPPER
Nupper=np.sum((-Pupper*np.cos(thetaUpper)*dsUpper)-(dsUpper*ShearUpper*np.sin(thetaUpper)))
Aupper=np.sum((-dsUpper*Pupper*np.sin(thetaUpper))+(dsUpper*ShearUpper*np.cos(thetaUpper)))
Mupper=np.sum((dsUpper*xcenter*(Pupper*np.cos(thetaUpper)+ShearUpper*np.sin(thetaUpper)))+(dsUpper*ycenterUpper*(Pupper*np.sin(thetaUpper)-ShearUpper*np.cos(thetaUpper))))
#Lower
Nlower=np.sum((Plower*np.cos(thetaLower)*dsLower-dsLower*ShearLower*np.sin(thetaLower)))
Alower=np.sum((dsLower*Plower*np.sin(thetaLower)+dsLower*ShearLower*np.cos(thetaLower)))
Mlower=np.sum((xcenter*dsLower*(-Plower*np.cos(thetaLower)+ShearLower*np.sin(thetaLower)))+(dsLower*ycenterLower*(Plower*np.sin(thetaLower)+ShearLower*np.cos(thetaLower))))
##TOTALS
N=Nupper+Nlower
A=Aupper+Alower
M=Mupper+Mlower
print('N=',N,'A=',A,'M=',M)
#for 10 degree angle of attack
alpha=10*np.pi/180
L=N*np.cos(alpha)-A*np.sin(alpha)
D=N*np.sin(alpha)+A*np.cos(alpha)
R=((L**2)+(D**2))**0.5

##dynamic Pressure
dynamicP=76946.86656
Cn=N/dynamicP
Cl=L/dynamicP
Cd=D/dynamicP
Cr=R/dynamicP
Ca=A/dynamicP
Xcp=-M/L
print('Cn=',Cn,'Cl=',Cl,'Cd=',Cd,'Cr=',Cr,'Ca=',Ca,'Xcp=',Xcp)
alphaSpread=np.arange(-2,16)
alphaSpreadrad=alphaSpread*np.pi/180
Lspread=N*np.cos(alphaSpreadrad)-A*np.sin(alphaSpreadrad)
Dspread=N*np.sin(alphaSpreadrad)+A*np.cos(alphaSpreadrad)
ratio=Lspread/Dspread
print('lift=',L,'drag=',D,'Resultant=',R)
plt.plot(alphaSpread,ratio, 'o')
plt.xlabel('X axis')
plt.ylabel('Y axis')

plt.show()